import Html exposing (text)

type Exp = Num Int
           | Add Exp Exp
           | Sub Exp Exp
           | Mult Exp Exp
           | Div Exp Exp
           | Var String
           | Igual Exp Exp
           | MaiorQue Exp Exp
           | MenorQue Exp Exp
           | Diferente Exp Exp
           | MaiorIgual Exp Exp
           | MenorIgual Exp Exp
           
type alias Env = (String -> Int) 
zero : Env
zero id = 0


avaliarExp: Exp -> Env -> Int
avaliarExp exp env =
    case exp of 
      Num n                -> n
      Var id               -> env id
      Add exp1  exp2       -> (avaliarExp exp1 env) + (avaliarExp exp2 env)
      Sub exp1  exp2       -> (avaliarExp exp1 env) - (avaliarExp exp2 env)
      Mult exp1 exp2       -> (avaliarExp exp1 env) * (avaliarExp exp2 env)
      Div exp1 exp2        -> (avaliarExp exp1 env) // (avaliarExp exp2 env)
      Igual exp1 exp2      -> if (avaliarExp exp1 env) == (avaliarExp exp2 env) then
                              1
                           else
                              0
      MaiorQue exp1 exp2   -> if (avaliarExp exp1 env) > (avaliarExp exp2 env) then
                              1
                           else
                              0
      MenorQue exp1 exp2   -> if (avaliarExp exp1 env) < (avaliarExp exp2 env) then
                              1
                           else
                              0
      Diferente exp1 exp2      -> if (avaliarExp exp1 env) /= (avaliarExp exp2 env) then
                              1
                           else
                              0
      MaiorIgual exp1 exp2      -> if (((avaliarExp exp1 env) > (avaliarExp exp2 env)) || ((avaliarExp exp1 env) == (avaliarExp exp2 env))) then
                              1
                           else   
                              0
      MenorIgual exp1 exp2      -> if (((avaliarExp exp1 env) < (avaliarExp exp2 env)) || ((avaliarExp exp1 env) == (avaliarExp exp2 env))) then
                              1
                           else   
                              0
      
      
type Prog = Attr String Exp
            | Seq Prog Prog
            | If Exp Prog Prog
            | While Exp Prog
            
                        

avaliarProg : Prog -> Env -> Env
avaliarProg prog env =
        case prog of
            Attr id exp ->
                let
                      val = (avaliarExp exp env)
                in
                      \ask -> if ask==id then val else (env ask)
            Seq prog1 prog2 ->
                let
                      env2 = (avaliarProg prog1 env)
                in
                      (avaliarProg prog2 env2)
            If compara prog1 prog2   ->
                if (avaliarExp compara env) /= 0 then
                    (avaliarProg prog1 env)
                else
                    (avaliarProg prog2 env)
            While compara loop   ->
                if (avaliarExp compara env) == 0 then
                    env
                else
                    (avaliarProg (Seq loop prog) env)        
                   

ling : Prog -> Int
ling prog = ((avaliarProg prog zero) "ret")
p1=(Attr "ret" (Num 1))
p2=(Seq(Attr "x" (Div (Num 8) (Num 2))) (Attr "ret" (Var "x")))
p3 = (If (MenorIgual (Num 4) (Num 3)) (Attr "ret" (Num 14)) ((Attr "ret" (Num 81))))
main = text(toString (ling p3))
